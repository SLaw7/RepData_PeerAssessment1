install.packages("KernSmooth")
library(KernSmooth)
install.packages("devtools")
find_rtools()
library(devtools)
find_rtools()
libary(devtools)
library(devtools)
find_rtools()
library("swirl")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c (z, 555, z)
z*2 +100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1:4) + c(0, 10, 100)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2 +1000
my_div
getwd()
ls()
x <- 9
play()
ls()
nxt()
ls()
list.files()
?list.files()
?list.files
args(list.files())
args(list.files
)
old.dir <- getwd()
mkdir testdir
dir.create(testdir)
args(dir.create)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
getwd()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
dir.create("testdir2", "testdir2/testdir3")
dir.create("testdir2/testdir3", recursive=TRUE)
file.remove("testdir2")
unlink("testdir2", recursive=TRUE)
cd(old.dir)
setwd(old.dir)
unlink("testdir", recursive=TRUE)
cube <- function(x,n) { x^3}
cube(3)
f <- function(x) {}
f <- function(x) {}
f <- function(x) {
g<-function(y){
y+z
}
z<-4
x+g(x)
}
z<-10
f(3)
x <- 5
y <- if(x<3){
NA
} else {10}
y
swirl()
1:20
Pi:10
pi:10
15:1
?`:`
seq(1,20)
seq(0,10, by=0.5)
seq(5,10,length=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with - my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=20)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
?rtools
install.package("RMySQL")
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(uscsDb);
ucscDb <- dbConnect(MySQL(),user="genome",
host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb,"show databases;"); dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(),user="genome", db="hg19"
host="genome-mysql.cse.ucsc.edu")
hg19 <- dbConnect(MySQL(),user="genome", db="hg19",
host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hd19)
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbDisconnect(hg19)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "471fbaefccefda05e382")
myapp <- oauth_app("github", "912e589e1a3b039ae10d1ed72ea1516eb8ece2c1")
myapp <- oauth_app("471fbaefccefda05e382", "912e589e1a3b039ae10d1ed72ea1516eb8ece2c1")
myapp <- oauth_app("github", "471fbaefccefda05e382912e589e1a3b039ae10d1ed72ea1516eb8ece2c1")
myapp <- oauth_app("github", "471fbaefccefda05e382", "912e589e1a3b039ae10d1ed72ea1516eb8ece2c1")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httpuv)
?httr
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("httr")
install.packages("DBI")
install.packages("DBI")
myurl <- "https://127.0.0.1/imaginary/file.csv"
setInternet2(use=TRUE)
download.file(url=myurl, destfile="localcopy.csv")
require(downloader)
myurl <- "https://127.0.0.1/imaginary/file.csv"
download(myurl, destfile="localcopy.csv")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "471fbaefccefda05e382", "912e589e1a3b039ae10d1ed72ea1516eb8ece2c1")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
>jsonlite
?jsonlite
json1=content(req)
json2=jsonlite::fromJSON(toJSON(json1))
?toJSON
library(jsonlite)
json2=jsonlite::fromJSON(toJSON(json1))
json2[1,1:4]
?dim
dim(json2)
dim(json1)
json1
req
?stop_for_status
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key="471fbaefccefda05e382", secret="912e589e1a3b039ae10d1ed72ea1516eb8ece2c1")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
library(httpuv)
?httpuv
??httpuv
install.packages("RCurl")
install.packages("RCurl")
source("http://bioconductor.org/biocLite.R")
biocLite("RCurl")
library(RCurl)
library(httpuv)
library(httpuv)
library(base)
?base
library(httr)
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github", "471fbaefccefda05e382",
"912e589e1a3b039ae10d1ed72ea1516eb8ece2c1")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
myapp <- oauth_app("github", "912e589e1a3b039ae10d1ed72ea1516eb8ece2c1", "471fbaefccefda05e382")
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
fileurl<-"https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(fileUrl, destfile = "./WeeklySSTdata.for")
download.file(fileurl, destfile = "./WeeklySSTdata.for")
data <- read.fwf("./WeeklySSTdata.for",c(9, 4, 4, 4, 4, 4, 4, 4, 4), skip=3)
head(data)
data <- read.fwf("./WeeklySSTdata.for",c(9, 4, 4, 4, 4, 4, 4, 4, 4), skip=4)
head(data)
data <- read.fwf("./WeeklySSTdata.for",c(14, 4, 9, 4, 9, 4, 9, 4, 5), skip=4)
head(data)
data <- read.fwf("./WeeklySSTdata.for",c(15, 4, 9, 4, 9, 4, 9, 4, 4), skip=4)
head(data)
data <- read.fwf("./WeeklySSTdata.for",c(-28, 4, -30), skip=4)
head(data)
dat <- read.fwf("./WeeklySSTdata.for",c(-28, 4, -30), skip=4)
data <- as.numeric(dat)
dim(dat)
sum(dat)
data <- read.fwf("./WeeklySSTdata.for",c(-28, 4, -30), skip=4)
sum(data)
swirl()
library("swirl")
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >=6
my_char <- c("my", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Shirley")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X","Y","Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data ==NA
sum(my_na)
my_data
0\0
0/0
Inf-Inf
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10,0,20)
y<- 0.5 + 2 *x +e
x
e
plot(x,y)
2015-02-07 10:23:05
"2015-02-07 10:23:05"
x<- "2015-02-07 10:23:05"
x+100
y<- "2015-02-06 10:23:05"
x-y
y<- as.Date("2015-02-06 10:23:05")
x<- as.Date("2015-02-07 10:23:05")
x-y
x<- as.Date("2015-02-07 10:19:45")
x-y
x+4
?POSIXct
?format
format("1985-09-14 07:45:00", format = "%Y-%m-%d %H:%M:%S", tz = "PTZ", usetz = "ET")
x <- format("1985-09-14 07:45:00", format = "%Y-%m-%d %H:%M:%S", tz = "PTZ", usetz = "ET")
x+10
as.Date("2001-01-01") + 45
library(lubridate)
as.Date(1203)
here()
x<-new_duration(second=100)
y+x
y
y + seconds(100)
olson_time_zones
x <- format("1985-09-14 07:45:00", format = "%Y-%m-%d %H:%M:%S", tz = "PTZ", usetz = "ET")
x<- as.Date(x)
x
x+seconds(1000000000)
tz(x)
x <- format("1985-09-14 07:45:00", format = "%Y-%m-%d %H:%M:%S", tz = "America/Los_Angeles", usetz = "America/New_York")
tz(x)
x <- format("1985-09-14 07:45:00", format = "%Y-%m-%d %H:%M:%S", tz = "America/Los_Angeles", usetz = "America/New_York")
x<- as.Date(x)
tz(x)
x <- format("1985-09-14 07:45:00", tz = "UTC-7:00", usetz = "UTC-4:00")
x<- as.Date(x)
tz(x)
ppois(10,lambda=5*3)
>pnorm
?pnorm
pnorm(70, mean=80, sd=10)
dnorm(.95, mean=1100, sd=75)
?invnorm
pnorm(1247, mean=1100, sd=75)
pnorm(1223, mean=1100, sd=75)
?pbinom
pbinom(3, 5, .5)
1-pbinom(3, 5, .5)
pnorm(16,15,1)-pnorm(14,15,1)
data <- read.csv("Activity/activity.csv")
setwd("~/GitHub/RepData_PeerAssessment1")
data <- read.csv("Activity/activity.csv")
day_steps <- aggregate(steps ~ date, data=data, sum)
avg_steps <- aggregate(steps ~ interval, data=data, mean)
complete_data <-data
for (i in 1:length(complete_data$steps)){
if(is.na(complete_data$steps[i])==TRUE){
x<-complete_data$interval[i]
complete_data$steps[i]<-avg_steps[avg_steps$interval==x,2]
}
}
day_steps2 <- aggregate(steps ~ date, data=complete_data, sum)
complete_data$date <- strptime(complete_data$date, "%Y-%m-%d")
#create a column with the day of the week for each entry
complete_data <- cbind(complete_data, "day" = weekdays(complete_data$date) )
#assign the factors of the new column to a vector "f"
f<- factor(complete_data$day)
#relabel the "Sunday" and "Saturday" levels "weekend", and the other five levels "weekday"
levels(f) <- c("weekend", "weekday", "weekday", "weekday", "weekday", "weekday", "weekend")
levels(factor(complete_data$day)) <- c("weekend", "weekday", "weekday", "weekday", "weekday", "weekday", "weekend")
levels(complete_data$day) <- c("weekend", "weekday", "weekday", "weekday", "weekday", "weekday", "weekend")
str(complete_data)
head(complete_data)
avg_weekend_steps <- aggregate(steps ~ interval, data=complete_data, mean)
head(avg_weekend_steps)
avg_weekend_steps <- aggregate(steps ~ interval, data=complete_data[complete_data$day="weekend",], mean)
avg_weekend_steps <- aggregate(steps ~ interval, data=complete_data[complete_data$day=="weekend",], mean)
head(avg_weekend_steps)
avg_weekend_steps <- aggregate(steps ~ interval, data=complete_data[complete_data$day=="weekday",], mean)
head(avg_weekend_steps)
head(avg_weekday_steps)
avg_weekend_steps <- aggregate(steps ~ interval, data=complete_data[complete_data$day=="weekend",], mean)
avg_weekday_steps <- aggregate(steps ~ interval, data=complete_data[complete_data$day=="weekday",], mean)
avg_weekend_steps - avg_weekday_steps
library(lattice)
?xyplot
avg_day_steps <- cbind("interval" = avg_weekend_steps$interval, "weekend" = avg_weekend_steps$steps, "weekday" = avg_weekday_steps$steps)
head(avg_day_steps)
dim(avg_day_steps)
str(avg_day_steps)
avg_day_steps <- cbind("interval" = as.int(avg_weekend_steps$interval), "weekend" = as.numeric(avg_weekend_steps$steps), "weekday" = as.numeric(avg_weekday_steps$steps)
)
avg_day_steps <- cbind("interval" = as.integer(avg_weekend_steps$interval), "weekend" = as.numeric(avg_weekend_steps$steps), "weekday" = as.numeric(avg_weekday_steps$steps))
head(avg_day_steps)
str(avg_day_steps)
dim(avg_day_steps)
avg_day_steps <- cbind("interval" = as.numeric(avg_weekend_steps$interval), "weekend" = as.numeric(avg_weekend_steps$steps), "weekday" = as.numeric(avg_weekday_steps$steps))
head(avg_day_steps)
dim(avg_day_steps)
str(avg_day_steps)
str(avg_day_steps)
?dplyr
?merge
avg_weekend_steps <- aggregate(steps ~ interval, data=complete_data[complete_data$day=="weekend",], mean)
avg_weekday_steps <- aggregate(steps ~ interval, data=complete_data[complete_data$day=="weekday",], mean)
avg_day_steps <- merge(avg_weekend_steps, avg_weekday_steps, by.x="interval", by.y="interval")
head(avg_day_steps)
avg_weekend_steps$day <- as.factor("weekend")
head(avg_weekend_steps)
avg_weekday_steps$day <- as.factor("weekday")
avg_day_steps <- merge(avg_weekend_steps, avg_weekday_steps, by.x="interval", by.y="interval")
head(avg_day_steps)
avg_day_steps <- rbind(avg_weekend_steps, avg_weekday_steps)
head(avg_day_steps)
str(avg_day_steps)
avg_weekend_steps <- aggregate(steps ~ interval, data=complete_data[complete_data$day=="weekend",], mean)
avg_weekday_steps <- aggregate(steps ~ interval, data=complete_data[complete_data$day=="weekday",], mean)
avg_weekend_steps$day <- as.factor("weekend")
avg_weekday_steps$day <- as.factor("weekday")
avg_day_steps <- rbind(avg_weekend_steps, avg_weekday_steps)
head(avg_day_steps)
str(avg_day_steps)
xyplot(interval ~ steps | day, data = avg_day_steps, layout = c(1, 2))
xyplot(steps ~ interval | day, data = avg_day_steps, layout = c(1, 2))
?xyplot
xyplot(steps ~ interval | day, data = avg_day_steps, layout = c(1, 2), xlab = "5-minute interval", ylab = "average number of steps taken", type="l")
xyplot(steps ~ interval | day, data = avg_day_steps, layout = c(1, 2), xlab = "5-Minute Interval", ylab = "Average Number of Steps Taken", type="l")
xyplot(steps ~ interval | day,
data = avg_day_steps,
type="l",
layout = c(1, 2),
main = "Average Number of Steps Taken Per 5-Minute Interval",
xlab = "5-Minute Interval",
ylab = "Average Number of Steps Taken")
